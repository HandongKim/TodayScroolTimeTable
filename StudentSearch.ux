<Page ux:Class="StudentSearch">
	<Router ux:Dependency="router" />

	<JavaScript>
		var Observable = require('FuseJS/Observable');
		var FileSystem = require("FuseJS/FileSystem");
		var path = FileSystem.dataDirectory + "/" + "StudentSetting.tmp";

		var year = Observable(2018);
		var years = Observable();
		for (var i = 0 ; i < 10 ; i++) {
			years.add(2018+i);
		}
		var stYearPos = Observable(0);
		
		var month = Observable(1);
		var months = Observable();
		for (var i = 0 ; i < 12 ; i++) {
			months.add(i+1);
		}
		var stMonthPos = Observable(0);
		
		var day = Observable(21);
		var days = Observable();
		for (var i = 0 ; i < 31 ; i++) {
			days.add(i+1);
		}
		var stDayPos = Observable(0);
		
		function currentDateSet() {
			var currentTime = new Date();

			year.value = currentTime.getFullYear();
			stYearPos.value = 0;
			for (var i = 0 ; i < years.length ; i++) {
				if (years.getAt(i) == year.value) {
					break;
				} else {
					stYearPos.value += 50;
				}
			}

			month.value = currentTime.getMonth() + 1;
			stMonthPos.value = 0;
			for (var i = 0 ; i < months.length ; i++) {
				if (months.getAt(i) == month.value) {
					break;
				} else {
					stMonthPos.value += 50;
				}
			}

			day.value = currentTime.getDate();
			stDayPos.value = 0;
			for (var i = 0 ; i < days.length ; i++) {
				if (days.getAt(i) == day.value) {
					break;
				} else {
					stDayPos.value += 50;
				}
			}
			return true;
		}

		function daysSetting(x) {
			var maxDay = 28;
			if (x == 2) {
				if ((year.value % 4 == 0) && (year.value % 100 != 0) || (year.value % 400 == 0)) {
					maxDay = 29;
				}
			} else if (x > 7) {
				if (x % 2 == 1) {
					maxDay = 30;
				} else if (x % 2 == 0) {
					maxDay = 31;
				}
			} else {
				if (x % 2 == 0) {
					maxDay = 30;
				} else if (x % 2 == 1) {
					maxDay = 31;
				}
			}

			if (maxDay < days.length) {
				var temp = days.length;
				for (var i = maxDay+1 ; i <= temp ; i++) {
					days.tryRemove(i);
				}
			} else if (maxDay > days.length) {
				var temp = days.length;
				for (var i = temp+1 ; i <= maxDay ; i++) {
					days.add(i);
				}
			}
		}
		month.onValueChanged(null, function(x) {
			daysSetting(x);
		});
		year.onValueChanged(null, function(x) {
			daysSetting(month.value);
		});

		studentPickerOn = Observable(false);
		function studentPickerUp() {
			studentPickerOn.value = true;
		}
		function studentPickerDown() {
			studentPickerOn.value = false;
		}

		var basicClass = Observable();
		
		var changedClass = Observable();

		for (var i = 0 ; i < 7 ; i++) {
			basicClass.add("");
		}
		for (var i = 0 ; i < 7 ; i++) {
			changedClass.add({className: "", color: "#197"});
		}

		var student = {
			schoolGrade: Observable(),
			location: Observable(),
			schoolName: Observable(),
			class: Observable(),
			schoolCode: "",
			authKey: ""
		};

		function readStudentSetting() {
			FileSystem.exists(path).then(function(x) {
				if (x) {
					FileSystem.readTextFromFile(path).then(function(contents) {
						var tempArray = JSON.parse(contents);

						student.schoolGrade.value = tempArray["schoolGrade"];
						student.location.value = tempArray["location"];
						student.schoolName.value = tempArray["schoolName"];
						student.class.value = tempArray["class"];
						student.schoolCode = tempArray["schoolCode"];
						student.authKey = tempArray["authKey"];
					}, function(error) {
						console.log(error);
					});
					currentDateSet();
					window.setTimeout(function() {
						searchTimetable();
					}, 1000);
				} else {
					studentSearchAlert.title.value = "설정";
					studentSearchAlert.contents.value = "학교정보를 먼저 설정하셔야 검색하실 수 있습니다.";
					studentSearchAlert.layer.value = "Overlay";
					currentDateSet();
				}
			}, function(error) {
				console.log("Unable to check if file exists");
			});
		}

		var studentSearchingPanel = {
			layer: Observable("Background"),
			isLoading: Observable(false)
		};

		var currentKey = "98ydjbo4u";

		function searchTimetable() {
			// 로딩패널 온
			studentSearchingPanel.layer.value = "Overlay";
			studentSearchingPanel.isLoading.value = true;

			// 시간표 지우기
			basicClass.clear();
			for (var i = 0 ; i < 7 ; i++) {
				basicClass.add("");
			}
			changedClass.clear();
			for (var i = 0 ; i < 7 ; i++) {
				changedClass.add({className: "", color: "#197"});
			}

			// 요일 확인
			var week = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
			var searchDay = new Date();
			searchDay.setYear(year.value);
			searchDay.setMonth(month.value-1);
			searchDay.setDate(day.value);
			var searchDayLevel = week[searchDay.getDay()];

			if (searchDayLevel == "sat") {
				studentSearchingPanel.layer.value = "Background";
				studentSearchingPanel.isLoading.value = false;
				studentSearchAlert.title.value = "토요일";
				studentSearchAlert.contents.value = "찾으시는 날은 토요일입니다.";
				studentSearchAlert.layer.value = "Overlay";
				return;
			} else if (searchDayLevel == "sun") {
				studentSearchingPanel.layer.value = "Background";
				studentSearchingPanel.isLoading.value = false;
				studentSearchAlert.title.value = "일요일";
				studentSearchAlert.contents.value = "찾으시는 날은 일요일입니다.";
				studentSearchAlert.layer.value = "Overlay";
				return;
			}

			// 유효성검사
			var secureUrl = "https://myclasstimetable-71c90.firebaseio.com/schoolCode/" + student.schoolCode + ".json";
			fetch(secureUrl, {
				method: 'GET',
				cache: 'default',
				headers: { "Content-type": "application/json"}
			}).then(function(result) {
				var secureItem = JSON.parse(result._bodyInit);
				currentKey = secureItem["student"];
				var startDate = secureItem["startDate"];
				var endDate = secureItem["endDate"];

				var tempMonth;
				if (month.value < 10) {
					tempMonth = "0"+month.value;
				} else {
					tempMonth = month.value;
				}
				var tempDay;
				if (day.value < 10) {
					tempDay = "0"+day.value;
				} else {
					tempDay = day.value;
				}
				var tempDate = year.value + tempMonth + tempDay;
				if (student.authKey != currentKey) {
					studentSearchingPanel.layer.value = "Background";
					studentSearchingPanel.isLoading.value = false;
					studentSearchAlert.title.value = "인증키";
					studentSearchAlert.contents.value = "인증키가 잘못되었습니다.";
					studentSearchAlert.layer.value = "Overlay";
					return;
				} else if ((tempDate-startDate)<0 || (tempDate-endDate)>0) {
					studentSearchingPanel.layer.value = "Background";
					studentSearchingPanel.isLoading.value = false;
					studentSearchAlert.title.value = "학사일정";
					studentSearchAlert.contents.value = "조회하는 날짜는 학기중이 아닙니다.";
					studentSearchAlert.layer.value = "Overlay";
					return;
				}
				return true;
			}).then(function(y) {
				if (y) {
					// 기본 시간표에 시간표 추가
					var basicUrl = "https://myclasstimetable-71c90.firebaseio.com/school/"+ student.schoolCode+"/basic.json";
					fetch(basicUrl, {
						method: 'GET',
						cache: 'default',
						headers: { "Content-type": "application/json"}
					}).then(function(result) {
						if (result.status !== 200) {
							console.log("Something is wrong");
							return;
						} else {
							var tempData = JSON.parse(result._bodyInit);
							var grade = student.class.value.slice(0,1);
							var classNum = student.class.value.slice(student.class.value.indexOf('-')+1, student.class.value.length);

							for (var o in tempData) {
								if (o.slice(0,1) == grade) {
									var tempData2 = tempData[o];
									for (var i in tempData2) {
										if (i.slice(0,1) == classNum) {
											var tempData3 = tempData2[i];
											for (var j in tempData3) {
												if (j == searchDayLevel) {
													var tempData4 = tempData3[j];
													for (var k in tempData4) {
														console.log(k);
														basicClass.replaceAt(k.slice(0,1)-1, tempData4[k].lecture);
													}
												}
											}
										}
									}
								}
							}
							return true;
						}
					}).then(function(x) {
						if (x) {
							// 서버에서 오늘 시간표 받아오기
							var tempMonth;
							if (month.value < 10) {
								tempMonth = "0"+month.value;
							} else {
								tempMonth = month.value;
							}
							var tempDay;
							if (day.value < 10) {
								tempDay = "0"+day.value;
							} else {
								tempDay = day.value;
							}

							var changeUrl = "https://myclasstimetable-71c90.firebaseio.com/school/" +student.schoolCode + "/change/" + year.value + tempMonth + tempDay + ".json";

							fetch(changeUrl, {
								method: 'GET',
								cache: 'default',
								headers: { "Content-type": "application/json"}
							}).then(function(result) {
								if (result.status !== 200) {
									console.log("Something is wrong");
									return;
								} else {
									var tempData = JSON.parse(result._bodyInit);
									if (tempData == null) {
										changedClass.replaceAt(0, {className: "없", color: "#c47"});
										changedClass.replaceAt(1, {className: "", color: "#197"});
										changedClass.replaceAt(2, {className: "습", color: "#c47"});
										changedClass.replaceAt(3, {className: "", color: "#197"});
										changedClass.replaceAt(4, {className: "니", color: "#c47"});
										changedClass.replaceAt(5, {className: "", color: "#197"});
										changedClass.replaceAt(6, {className: "다", color: "#c47"});
									} else {
										var grade = student.class.value.slice(0,1);
										var classNum = student.class.value.slice(student.class.value.indexOf('-')+1, student.class.value.length);

										for (var o in tempData) {
											// o는 학년
											if (o.slice(0,1) == grade) {
												var tempData2 = tempData[o];
												for (var i in tempData2) {
													if (i.slice(0,1) == classNum) {
														var tempData3 = tempData2[i];
														for (var j in tempData3) {
															changedClass.replaceAt(j.slice(0,1)-1, {className: tempData3[j].lecture, color: "#c47"});
														}
													}
												}
											}
										}
									}
									return true;
								}
							}).then(function(y) {
								studentSearchingPanel.layer.value = "Background";
								studentSearchingPanel.isLoading.value = false;
								if (changedClass.getAt(0).className != "없") {
									for (var i = 0 ; i < 7 ; i++) {
										if (basicClass.getAt(i) != changedClass.getAt(i).className) {
											var tempClass = changedClass.getAt(i).className;
											changedClass.replaceAt(i, {className: tempClass, color:"#c47"});
										} else {
											var tempClass = changedClass.getAt(i).className;
											changedClass.replaceAt(i, {className: tempClass, color:"#197"});
										}
									}
								}
							});
						}
					}).catch(function(error) {
						console.log(JSON.stringify(error));
					});
				}
			});
		}

		var studentSearchAlert = {
			title: Observable("경고창"),
			contents: Observable("경고창 내용입니다."),
			layer: Observable("Background")
		};

		function studentSearchAlertOk() {
			studentSearchAlert.layer.value = "Background";
		}

		module.exports = {
			stYearPos, years, year, stMonthPos, months, month, stDayPos, days, day,
			studentPickerOn, studentPickerUp, studentPickerDown,
			basicClass, changedClass,
			student, readStudentSetting, currentDateSet,
			studentSearchingPanel, searchTimetable,
			studentSearchAlert, studentSearchAlertOk
		};
	</JavaScript>

	<WhileActive>
		<Callback Handler="{readStudentSetting}" />
	</WhileActive>

	<Rectangle Width="250" Height="200" CornerRadius="5" Color="White" Layer="{studentSearchAlert.layer}">
		<DockPanel>
			<Rectangle Dock="Top" Width="250" Height="50" CornerRadius="5,5,0,0" Color="#197">
				<Text Font="Normal" Value="{studentSearchAlert.title}" Alignment="CenterLeft" Color="White" Margin="15">
					<Scaling Factor="1.2" />
				</Text>
			</Rectangle>

			<Panel Width="250" Height="100" Dock="Fill">
				<Text Font="Normal" Value="{studentSearchAlert.contents}" Alignment="TopLeft" Margin="10" TextWrapping="Wrap" />
			</Panel>

			<Panel Width="250" Height="50" Dock="Bottom">
				<Rectangle Width="100" Height="40" Alignment="Center" Color="#197" CornerRadius="10">
					<Text Font="Normal" Value="확인" Alignment="Center" Color="White" />

					<Clicked>
						<Callback Handler="{studentSearchAlertOk}" />
					</Clicked>
				</Rectangle>
			</Panel>
		</DockPanel>
		<Stroke Width="1" Color="Black" />
	</Rectangle>

	<Panel Width="100%" Height="100%" Color="#fff8" Layer="{studentSearchingPanel.layer}">
		<Circle ux:Name="studentSerchingPanelLoadingCircle" Width="50" Height="50" StartAngleDegrees="0" LengthAngleDegrees="90">
			<Stroke Width="5" Color="#197" />
		</Circle>

		<WhileTrue Value="{studentSearchingPanel.isLoading}">
			<Spin Target="studentSerchingPanelLoadingCircle" Frequency="2" />
			<Cycle Target="studentSerchingPanelLoadingCircle.LengthAngleDegrees" Low="30" High="300" Frequency="0.7" />
		</WhileTrue>
	</Panel>

	<StackPanel ux:Name="studentSearchPickerPanel" Color="White" Width="100%" Alignment="BottomCenter" Y="250">
		<Panel Height="50">
			<Rectangle Color="White" Alignment="CenterRight">
				<Button Text="확인" Margin="10" />
				<Clicked>
					<Callback Handler="{studentPickerDown}" />
				</Clicked>
			</Rectangle>
			<Rectangle Width="100%" Height="1" Color="Black" Alignment="Top" />
			<Rectangle Width="100%" Height="1" Color="Black" Alignment="Bottom" />
		</Panel>

		<Grid ColumnCount="8" Columns="1*, 3*, 1*, 2*, 1*, 2*, 1*, 1*" Width="100%" Height="150">
			<Panel />

			<MyPicker Selected="{year}" Data="{years}" StPos="{stYearPos}"  />

			<Text Font="Normal" Value="년" Alignment="Center" />

			<MyPicker Selected="{month}" Data="{months}" StPos="{stMonthPos}" />

			<Text Font="Normal" Value="월" Alignment="Center" />

			<MyPicker Selected="{day}" Data="{days}" StPos="{stDayPos}" />

			<Text Font="Normal" Value="일" Alignment="Center" />

			<Panel />
		</Grid>

		<Panel Height="50" />

		<WhileTrue Value="{studentPickerOn}">
			<Change studentSearchPickerPanel.Y="0" Duration="0.1" />
		</WhileTrue>
	</StackPanel>

	<DockPanel Color="White">
		<Panel Dock="Top" Height="50">
			<Grid ColumnCount="2">
				<Panel Color="White">
					<Circle Width="30" Height="30" Margin="10" Alignment="CenterLeft">
						<Stroke Width="3" Color="#197" />
						<Image File="Back.png" Width="60%" X="-2" Color="#197" Alignment="Center" />
					</Circle>

					<Clicked>
						<Callback Handler="{goBack}" />
						<Callback Handler="{studentPickerDown}" />
					</Clicked>
				</Panel>
				
				<Image File="Setting.png" Width="30" Color="#197" Alignment="CenterRight" Margin="10">
					<Clicked>
						<Callback Handler="{goStudentSetting}" />
					</Clicked>
				</Image>
			</Grid>
		</Panel>

		<StackPanel Dock="Top" Width="100%" Padding="10" ItemSpacing="10">
			<Grid ColumnCount="2" Columns="3*, 1*">
				<Text Font="Normal" Value="지역과 학교명을 반드시 확인하세요." Color="Black" Alignment="CenterLeft" />

				<Rectangle Width="60" Height="30" CornerRadius="5" Color="#197" Alignment="CenterRight">
					<Text Font="Normal" Value="검색" Color="White" Alignment="Center">
						<Scaling Factor="1.3" />
					</Text>

					<Clicked>
						<Callback Handler="{searchTimetable}" />
						<Callback Handler="{studentPickerDown}" />
					</Clicked>
				</Rectangle>
			</Grid>
			<Grid ColumnCount="2" Columns="1*, 5*" CellSpacing="5">
				<Text Font="Normal" Value="학교명 : " Alignment="CenterLeft" />
				<Rectangle Width="100%" Height="30" CornerRadius="3">
					<ScrollView AllowedScrollDirections="Horizontal" RelativeScrollPosition="1">
						<WrapPanel>
							<Text Font="Normal" Value="{student.location}, {student.schoolName}" Alignment="CenterLeft" Margin="5" />
						</WrapPanel>
					</ScrollView>
					<Stroke Width="1" Color="Black" />
				</Rectangle>
			</Grid>
			<Grid ColumnCount="4" Columns="1*, 4*, 1*, 2*" CellSpacing="5">
				<Text Font="Normal" Value="날짜 :" Alignment="Center" />
				<Rectangle Width="100%" Height="30" CornerRadius="3" Color="White">
					<Text Font="Normal" Value="{year} 년 {month} 월 {day} 일" Alignment="Center" Margin="10,0" />

					<Clicked>
						<Callback Handler="{studentPickerUp}" />
					</Clicked>
					<Stroke Width="1" Color="Black" />
				</Rectangle>

				<Text Font="Normal" Value="학반 :" Alignment="Center" />
				<Rectangle Width="100%" Height="30" CornerRadius="3">
					<Text Font="Normal" Value="{student.class}" Alignment="CenterLeft" Margin="5" />
					<Stroke Width="1" Color="Black" />
				</Rectangle>
			</Grid>
		</StackPanel>

		<Panel Dock="Fill" Color="#197">
			<ScrollView>
				<Grid ColumnCount="3" Columns="2*, 3*, 3*" Width="300" Margin="10" Color="White">
					<StackPanel>
						<Panel Width="100%" Height="50" Margin="2" Color="#197">
							<Text Font="Normal" Value="교시" Color="White" Alignment="Center" />
						</Panel>

						<Panel Width="100%" Height="50" Margin="2, 1" Color="#197">
							<Text Font="Normal" Value="1교시" Color="White" Alignment="Center" />
						</Panel>
						<Panel Width="100%" Height="50" Margin="2, 1" Color="#197">
							<Text Font="Normal" Value="2교시" Color="White" Alignment="Center" />
						</Panel>
						<Panel Width="100%" Height="50" Margin="2, 1" Color="#197">
							<Text Font="Normal" Value="3교시" Color="White" Alignment="Center" />
						</Panel>
						<Panel Width="100%" Height="50" Margin="2, 1" Color="#197">
							<Text Font="Normal" Value="4교시" Color="White" Alignment="Center" />
						</Panel>
						<Panel Width="100%" Height="50" Margin="2, 1" Color="#197">
							<Text Font="Normal" Value="5교시" Color="White" Alignment="Center" />
						</Panel>
						<Panel Width="100%" Height="50" Margin="2, 1" Color="#197">
							<Text Font="Normal" Value="6교시" Color="White" Alignment="Center" />
						</Panel>
						<Panel Width="100%" Height="50" Margin="2, 1" Color="#197">
							<Text Font="Normal" Value="7교시" Color="White" Alignment="Center" />
						</Panel>
						<Panel Height="1" />
					</StackPanel>

					<StackPanel>
						<Panel Width="100%" Height="50" Margin="2" Color="#197">
							<Text Font="Normal" Value="기본 시간표" Color="White" Alignment="Center" />
						</Panel>
						<Each Items="{basicClass}" Defer="Deferred">
							<Panel Width="100%" Height="50" Margin="2, 1" Color="#197">
								<Text Font="Normal" Value="{}" Color="White" Alignment="Center">
									<Scaling Factor="1.2" />
								</Text>
							</Panel>
						</Each>
						<Panel Height="1" />
					</StackPanel>

					<StackPanel>
						<Panel Width="100%" Height="50" Margin="2" Color="#c47">
							<Text Font="Normal" Value="바뀐 시간표" Color="White" Alignment="Center" />
						</Panel>
						<Each Items="{changedClass}" Defer="Deferred">
							<Panel Width="100%" Height="50" Margin="2, 1" Color="{color}">
								<ScrollView AllowedScrollDirections="Horizontal">
									<WrapPanel Alignment="Center">
										<Text Font="Normal" Value="{className}" Color="White" Alignment="Center">
											<Scaling Factor="1.2" />
										</Text>
									</WrapPanel>
								</ScrollView>
							</Panel>
						</Each>
						<Panel Height="1" />
					</StackPanel>
				</Grid>
			</ScrollView>
		</Panel>
	</DockPanel>
</Page>